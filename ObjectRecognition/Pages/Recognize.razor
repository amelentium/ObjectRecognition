@page "/recognize"

@using ObjectRecognition.Helpers;

@inject IScriptService Script;
@inject IJSRuntime JS;

<h3>Predict</h3>
<p>Select recognition model</p>
<p>
    <select @bind="SelectedModel">
        @if (Models != null && Models.Any())
        {
            @foreach (var model in Models)
            {
                <option value="@model">@GetFileNameWithoutExtension(model)</option>
            }
        }
    </select>
</p>
<p>Select images to recognize</p>
<p>
    <InputFile OnChange="@InputFileChange"
               accept="@(string.Join(',', Constants.ImageFileExtentions))" />
</p>
<p>
    <button class="btn btn-primary"
            @onclick="MakePrediction">
        Recognize
    </button>
</p>
@if (PredictionResults != null)
{
    <p>
        Results <br />
        <RadzenImage Path="@RadzenHelper.NormalizeImagePath(Image)" />
        @foreach (var result in PredictionResults)
        {
            <text>
                @(result.Key) - @(result.Value)%
            </text>
            <br />
        }
    </p>
}

@code {
    private string SelectedModel;
    private List<string> Models;
    private IBrowserFile File;
    private string Image;
    private Dictionary<string, string> PredictionResults;

    protected override void OnInitialized()
    {
        Models = Directory.EnumerateFiles(Constants.ModelsPath).ToList();
        SelectedModel = Models.FirstOrDefault();
    }

    private void InputFileChange(InputFileChangeEventArgs e)
    {
        File = e.File;
    }

    private async void MakePrediction()
    {
        var fileInfo = new System.IO.FileInfo(File.Name);
        var fileExtention = fileInfo.Extension.ToLower();

        var hasValidType = Constants.ImageFileExtentions.Contains(fileExtention);
        if (hasValidType)
        {
            Image = FileSystemHelper.GetItemPath(Enums.ItemType.UserImage, File.Name);
            var resultFileName = fileInfo.Name.Replace(fileInfo.Extension, ".txt");
            var resultFile = FileSystemHelper.GetItemPath(Enums.ItemType.UserImageResult, resultFileName);

            try
            {
                using var fileWriteStream = new FileStream(Image, FileMode.Create);

                await File.OpenReadStream(Constants.UserImageFileMaxSize).CopyToAsync(fileWriteStream);

                PredictionResults = await Script.ExecuteImagePrediction(SelectedModel, Image, resultFile);

                //Remove used files

                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.log", "Something went wrong: " + ex);
            }            
        }
    }
    private string GetFileNameWithoutExtension(string filePath)
    {
        var fileInfo = new System.IO.FileInfo(filePath);

        return fileInfo.Name.Replace(fileInfo.Extension, string.Empty);
    }
}
