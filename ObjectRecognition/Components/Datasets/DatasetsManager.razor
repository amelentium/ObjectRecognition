@using ObjectRecognition.Enums
@using ObjectRecognition.Helpers

@inject IJSRuntime JS

<div class="centered">
    <h3>Datasets</h3>

    <div class="btn-panel">
        <button class="btn btn-success oi oi-plus"
                @onclick=@(() => AddDialog.Show())>
        </button>
        <button class="btn btn-warning oi oi-pencil"
                @onclick=@(() => RenameDialog.Show())
                disabled=@String.IsNullOrEmpty(SelectedDataset)>
        </button>
        <button class="btn btn-danger oi oi-trash"
                @onclick=@(() => DeleteDialog.Show())
                disabled=@String.IsNullOrEmpty(SelectedDataset)>
        </button>
    </div>

    @if (Datasets.Count != 0)
    {
        <RadzenTree @bind-Value=SelectedTreeItem
                    Data="@Datasets"
                    Change="@TreeSelectionChange"
                    Style="width: 100%; height: 250px">
            <RadzenTreeLevel HasChildren="@((value) => false)">
                <Template>
                    <RadzenIcon Icon="book" />
                    @(context.Value as string)
                </Template>
            </RadzenTreeLevel>
        </RadzenTree>
    }
    else
    {
        <div>
            Empty
        </div>
    }
</div>

<AddDialog @ref="AddDialog"
           ItemType=@ItemType.Dataset
           OnConfirm="AddDataset" />
<RenameDialog @ref="RenameDialog"
              ItemType=@ItemType.Dataset
              OnConfirm="RenameDataset" />
<DeleteDialog @ref="DeleteDialog"
              ItemType=@ItemType.Dataset
              ItemName=@SelectedDataset
              OnConfirm="DeleteDataset" />

@code {
    [Parameter]
    public EventCallback<string> DatasetChange { get; set; }

    private List<string> Datasets;
    private object SelectedTreeItem;
    private string SelectedDataset;

    private AddDialog AddDialog;
    private RenameDialog RenameDialog;
    private DeleteDialog DeleteDialog;

    protected override void OnInitialized()
    {
        Datasets = Directory.EnumerateDirectories(Constants.DatasetsPath)
                            .Select(x => new DirectoryInfo(x).Name)
                            .ToList();
    }

    private void TreeSelectionChange(TreeEventArgs args)
    {
        ChangeSelectedDataset(args.Value as string);

        DatasetChange.InvokeAsync(SelectedDataset);
    }

    private void ChangeSelectedDataset(string dataset)
    {
        SelectedTreeItem = dataset;
        SelectedDataset = dataset;        
    }

    private void AddDataset(string datasetName)
    {
        var datasetPath = FileSystemHelper.GetItemPath(ItemType.Dataset, datasetName);

        try
        {
            var datasetDirectory = Directory.CreateDirectory(datasetPath);
            Datasets.Add(datasetDirectory.Name);
            Datasets.Sort();
            ChangeSelectedDataset(datasetDirectory.Name);
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", "Something went wrong: " + ex);
        }
    }

    private void RenameDataset(string datasetNewName)
    {
        var datasetCurrentPath = FileSystemHelper.GetItemPath(ItemType.Dataset, SelectedDataset);
        var datasetNewPath = FileSystemHelper.GetItemPath(ItemType.Dataset, datasetNewName);

        try
        {
            Directory.Move(datasetCurrentPath, datasetNewPath);
            Datasets.Remove(SelectedDataset);
            Datasets.Add(datasetNewName);
            Datasets.Sort();
            ChangeSelectedDataset(datasetNewName);
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", "Something went wrong: " + ex);
        }
    }

    private void DeleteDataset()
    {
        try
        {
            var datasetPath = FileSystemHelper.GetItemPath(ItemType.Dataset, SelectedDataset);
            Directory.Delete(datasetPath, true);
            Datasets.Remove(SelectedDataset);
            ChangeSelectedDataset(null);
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", "Something went wrong: " + ex);
        }
    }
}
